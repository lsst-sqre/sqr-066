# Document metadata. metadata.yaml is used by documenteer and other tools
# to build the document and index it. It should be maintained alongside the
# document in git and kept up to date.

# The series identifier. E.g. SQR, DMTN, SMTN, LDM, LSE, etc.
series: "SQR"

# Document number, as a string. It should be three digits, padded with leading zeros
serial_number: "066"

# Serial number of the document. E.g. SQR-001
# NOTE: this field is *planned* for deprecation
doc_id: "SQR-066"

# Title of the document, without the series/serial designation
doc_title: "RSP Notebook Aspect spawner design"

# Author names, ordered as a list. Each author name should be formatted as 'First Last'
authors:
  - "Russ Allbery"
  - "Adam Thornton"

# Current document revision date, YYYY-MM-DD
# Only set this field if you need to manually fix the revision date;
# the revision date is obtained from the HEAD Git commit otherwise.
# last_revised: 'YYYY-MM-DD'

# Version. Use semantic versioning, e.g., 1.0.0, including .dev, as necessary.
# This version string should correspond to the git tag when the document is
# published on Zenodo. If left commented out, the current Git branch is used
# instead version: '1.0.0'

# Digital Object Identifier (DOI). Uncomment if available.
# Keep this DOI updated as new releases are pushed to Zenodo
# doi: 10.5281/zenodo.#####

# Copyright statement
copyright: >-
  2022, Association of Universities for Research in Astronomy, Inc. (AURA)

# Description. A short, 1-2 sentence statemement used by document indices.
description: >-
  Proposes a design for spawning Notebook Aspect lab pods via a separate
  authenticated web service rather than internally in JupyterHub. This permits
  a significant reduction in the required privileges of JupyterHub and
  provides a simpler way to add local policy controls and custom spawner
  menus.

# Abstract, if available
abstract: >
  The Notebook Aspect of the Rubin Science Platform is built on top of
  JupyterHub and JupyterLab, running inside Kubernetes. The Science Platform
  must spawn Kubernetes pods and associated resources for users on request,
  maintain internal state for which pods are running so that the user is
  directed to their existing pod if present, and shut down pods when
  requested, either by the user or the system. Spawning a pod may also require
  privileged setup actions, such as creating a home directory for the user.

  JupyterHub provides a Kubernetes spawner that can be used for this purpose,
  but it requires granting extensive Kubernetes permissions directly to
  JupyterHub, a complex piece of software that is directly exposed to user
  requests. This tech note proposes an alternative design using a JupyterHub
  spawner that delegates all of its work to a RESTful web service, and an
  implementation of that web service that performs the spawning along with
  associated Science Platform business logic such as user home directory
  creation and construction of the spawner options form. This same approach
  can be used for a custom Dask spawner for parallel computation within the
  Science Platform.

# URL where this document is published by Read the Docs. e.g. http://sqr-001.lsst.codes
url: "https://sqr-066.lsst.io"

# LSST Docushare URL, if authoritative versions of this are are stored there.
# Leave as an empty string or comment out this key if there is no Docushare URL.
docushare_url: ""

# GitHub repo URL
github_url: "https://github.com/lsst-sqre/sqr-066"
